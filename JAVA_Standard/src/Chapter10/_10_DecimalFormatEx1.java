package Chapter10;

import java.text.DecimalFormat;

public class _10_DecimalFormatEx1 {

	public static void main(String[] args) throws Exception{
		
		double number = 1234567.89;
		String[] pattern = {
			"0", // 10진수(값이 없을 때는 0)
			"#", // 10진수(값이 없을 때는 출력x)
			"0.0", // 10진수(값이 없을 때는 0)
			"#.#", // 10진수(값이 없을 때는 출력x)
			"0000000000.0000", // 10진수(값이 없을 때는 0)
			"##########.####", // 10진수(값이 없을 때는 출력x)
			"#.#-", // 음수부호
			"-#.#", // 음수부호
			"#,###.##", // 단위 구분자
			"#,####.##", // 단위 구분자
			
			// 지수기호
			/*
			 	셀서직의 표시형식이 일반형식 이면서 숫자가 너무 크거나 소수점이 많을 때 숫자가 아주 크거나 작지
			 	않은데 셀의 폭이 숫자를 다 나타낼 수가 없을 때 사용
			 	
			 	ex) 1E+11은 E앞의 숫자에 '0'이 11개인 숫자 100,000,000,000을 곱하라는 것이다.
			 	1, 1E+05 = 1 * 100000
			 	2, 1.2E+03 = 1.2 * 1000
			 	3, 1E-05 = 1 / 100000
			 	4, 1.5E-03 = 1.5 / 1000
			 */
			"#E0", 
			"0E0",
			"##E0",
			"00E0",
			"####E0",
			"0000E0",
			"#.#E0",
			"0.0E0",
			"0.000000000E0",
			"00.00000000E0",
			"000.0000000E0",
			"#.#########E0",
			"##.########E0",
			"###.#######E0",
					
			"#,###.##+;#,###.##-", // 패턴 구분자(양수일때+,음수일때-)
			"#.#%", // 퍼센트
			"#.#\u2030", // 퍼밑(퍼센트 * 10)
			"\u00A4 #,###", // 통화
			"'#'#,###", // escape 문자
			"''#,###",
		};
		
		for(int i=0; i < pattern.length; i++) {
			DecimalFormat df = new DecimalFormat(pattern[i]);
			System.out.printf("%19s : %s\n", pattern[i], df.format(number));
		}
	} // main
}